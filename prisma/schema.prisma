// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// generator erd {
//   provider                  = "prisma-erd-generator"
//   output                    = "../ERD.svg"
//   includeRelationFromFields = true
//   // ERD_DEBUG                 = true
// }

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// model Example {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  // sessions      Session[]
  eventParticipants EventParticipant[]
  groupMessage      GroupMessage[]
  groupMember       GroupMember[]
}

model Event {
  id            String             @id @default(cuid())
  name          String
  description   String
  street        String
  city          String
  country       String
  postCode      String
  startDate     DateTime
  latitude      Decimal?
  longitude     Decimal?
  tags          EventTag[]
  EventCategory EventCategory[]
  UserEvents    EventParticipant[]
  group         Group?             @relation(fields: [groupId], references: [id])
  groupId       String?
}

model Group {
  id          String @id @default(cuid())
  name        String
  description String

  eventTags     EventTag[]
  groupMessages GroupMessage[]
  userGroups    GroupMember[]
  events        Event[]
}

model EventParticipant {
  role    EventRole @default(USER)
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  event   Event     @relation(fields: [eventId], references: [id])
  eventId String

  @@id([userId, eventId])
}

model GroupMember {
  role    GroupRole @default(USER)
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  group   Group     @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId])
}

// model UserEvents {
//   role    GroupRole @default(USER)
//   user    User      @relation(fields: [userId], references: [id])
//   userId  String
//   group   Group     @relation(fields: [groupId], references: [id])
//   groupId String

//   @@id([userId, groupId])
// }

model EventTag {
  id      String  @id @default(cuid())
  name    String
  events  Event[]
  Group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?
}

model EventCategory {
  id     String  @id @default(cuid())
  name   String
  events Event[]
}

model GroupMessage {
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String

  @@id([userId, groupId])
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

enum GroupRole {
  USER
  ADMIN
}

enum EventRole {
  USER
  ADMIN
}
